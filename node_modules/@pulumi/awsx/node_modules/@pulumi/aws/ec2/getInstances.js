"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Use this data source to get IDs or IPs of Amazon EC2 instances to be referenced elsewhere,
 * e.g. to allow easier migration from another management solution
 * or to make it easier for an operator to connect through bastion host(s).
 *
 * > **Note:** It's strongly discouraged to use this data source for querying ephemeral
 * instances (e.g. managed via autoscaling group), as the output may change at any time
 * and you'd need to re-run `apply` every time an instance comes up or dies.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testInstances = aws.ec2.getInstances({
 *     filters: [{
 *         name: "instance.group-id",
 *         values: ["sg-12345678"],
 *     }],
 *     instanceStateNames: [
 *         "running",
 *         "stopped",
 *     ],
 *     instanceTags: {
 *         Role: "HardWorker",
 *     },
 * });
 * const testEip: aws.ec2.Eip[] = [];
 * for (let i = 0; i < testInstances.ids.length; i++) {
 *     testEip.push(new aws.ec2.Eip(`test-${i}`, {
 *         instance: testInstances.ids[i],
 *     }));
 * }
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/instances.html.markdown.
 */
function getInstances(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise = pulumi.runtime.invoke("aws:ec2/getInstances:getInstances", {
        "filters": args.filters,
        "instanceStateNames": args.instanceStateNames,
        "instanceTags": args.instanceTags,
    }, opts);
    return pulumi.utils.liftProperties(promise, opts);
}
exports.getInstances = getInstances;
//# sourceMappingURL=getInstances.js.map
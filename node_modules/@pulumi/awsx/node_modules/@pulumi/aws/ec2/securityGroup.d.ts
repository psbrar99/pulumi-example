import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides a security group resource.
 *
 * > **NOTE on Security Groups and Security Group Rules:** This provider currently
 * provides both a standalone Security Group Rule resource (a single `ingress` or
 * `egress` rule), and a Security Group resource with `ingress` and `egress` rules
 * defined in-line. At this time you cannot use a Security Group with in-line rules
 * in conjunction with any Security Group Rule resources. Doing so will cause
 * a conflict of rule settings and will overwrite rules.
 *
 * > **NOTE:** Referencing Security Groups across VPC peering has certain restrictions. More information is available in the [VPC Peering User Guide](https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-security-groups.html).
 *
 * > **NOTE:** Due to [AWS Lambda improved VPC networking changes that began deploying in September 2019](https://aws.amazon.com/blogs/compute/announcing-improved-vpc-networking-for-aws-lambda-functions/), security groups associated with Lambda Functions can take up to 45 minutes to successfully delete.
 *
 *
 * ## Usage with prefix list IDs
 *
 * Prefix list IDs are managed by AWS internally. Prefix list IDs
 * are associated with a prefix list name, or service name, that is linked to a specific region.
 * Prefix list IDs are exported on VPC Endpoints, so you can use this format:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ...
 * const myEndpoint = new aws.ec2.VpcEndpoint("myEndpoint", {});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/security_group.html.markdown.
 */
export declare class SecurityGroup extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupState, opts?: pulumi.CustomResourceOptions): SecurityGroup;
    /**
     * Returns true if the given object is an instance of SecurityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SecurityGroup;
    /**
     * The ARN of the security group
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Description of this egress rule.
     */
    readonly description: pulumi.Output<string>;
    /**
     * Can be specified multiple times for each
     * egress rule. Each egress block supports fields documented below.
     */
    readonly egress: pulumi.Output<outputs.ec2.SecurityGroupEgress[]>;
    /**
     * Can be specified multiple times for each
     * ingress rule. Each ingress block supports fields documented below.
     */
    readonly ingress: pulumi.Output<outputs.ec2.SecurityGroupIngress[]>;
    /**
     * The name of the security group. If omitted, this provider will
     * assign a random, unique name
     */
    readonly name: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix: pulumi.Output<string | undefined>;
    /**
     * The owner ID.
     */
    readonly ownerId: pulumi.Output<string>;
    /**
     * Instruct this provider to revoke all of the
     * Security Groups attached ingress and egress rules before deleting the rule
     * itself. This is normally not needed, however certain AWS services such as
     * Elastic Map Reduce may automatically add required rules to security groups used
     * with the service, and those rules may contain a cyclic dependency that prevent
     * the security groups from being destroyed without removing the dependency first.
     * Default `false`
     */
    readonly revokeRulesOnDelete: pulumi.Output<boolean | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * The VPC ID.
     */
    readonly vpcId: pulumi.Output<string>;
    /**
     * Create a SecurityGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecurityGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SecurityGroup resources.
 */
export interface SecurityGroupState {
    /**
     * The ARN of the security group
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * Description of this egress rule.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Can be specified multiple times for each
     * egress rule. Each egress block supports fields documented below.
     */
    readonly egress?: pulumi.Input<pulumi.Input<inputs.ec2.SecurityGroupEgress>[]>;
    /**
     * Can be specified multiple times for each
     * ingress rule. Each ingress block supports fields documented below.
     */
    readonly ingress?: pulumi.Input<pulumi.Input<inputs.ec2.SecurityGroupIngress>[]>;
    /**
     * The name of the security group. If omitted, this provider will
     * assign a random, unique name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    /**
     * The owner ID.
     */
    readonly ownerId?: pulumi.Input<string>;
    /**
     * Instruct this provider to revoke all of the
     * Security Groups attached ingress and egress rules before deleting the rule
     * itself. This is normally not needed, however certain AWS services such as
     * Elastic Map Reduce may automatically add required rules to security groups used
     * with the service, and those rules may contain a cyclic dependency that prevent
     * the security groups from being destroyed without removing the dependency first.
     * Default `false`
     */
    readonly revokeRulesOnDelete?: pulumi.Input<boolean>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The VPC ID.
     */
    readonly vpcId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SecurityGroup resource.
 */
export interface SecurityGroupArgs {
    /**
     * Description of this egress rule.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Can be specified multiple times for each
     * egress rule. Each egress block supports fields documented below.
     */
    readonly egress?: pulumi.Input<pulumi.Input<inputs.ec2.SecurityGroupEgress>[]>;
    /**
     * Can be specified multiple times for each
     * ingress rule. Each ingress block supports fields documented below.
     */
    readonly ingress?: pulumi.Input<pulumi.Input<inputs.ec2.SecurityGroupIngress>[]>;
    /**
     * The name of the security group. If omitted, this provider will
     * assign a random, unique name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    /**
     * Instruct this provider to revoke all of the
     * Security Groups attached ingress and egress rules before deleting the rule
     * itself. This is normally not needed, however certain AWS services such as
     * Elastic Map Reduce may automatically add required rules to security groups used
     * with the service, and those rules may contain a cyclic dependency that prevent
     * the security groups from being destroyed without removing the dependency first.
     * Default `false`
     */
    readonly revokeRulesOnDelete?: pulumi.Input<boolean>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The VPC ID.
     */
    readonly vpcId?: pulumi.Input<string>;
}
